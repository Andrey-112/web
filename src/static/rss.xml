<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[DevTube the place where developer videos live]]></title>
        <description><![CDATA[DevTube the place where developer videos live]]></description>
        <link>https://dev.tube</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sun, 29 Jul 2018 04:33:20 GMT</lastBuildDate>
        <atom:link href="https://dev.tube/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[microPython for ESP32]]></title>
            <description><![CDATA[Nick Moore
http://linux.conf.au/schedule/presentation/202/
Python is small. Micro even.]]></description>
            <link>https://dev.tube/video/-MrqCmq3Z5k</link>
            <guid isPermaLink="true">https://dev.tube/video/-MrqCmq3Z5k</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Running production workloads in a programmable infrastructure]]></title>
            <description><![CDATA[Alejandro Tesch
http://linux.conf.au/schedule/presentation/165/
Infrastructure as Code is a hot topic today, however several IT managers and System Administrators often fail to see the benefits that it can provide to their day to day operations.

In this mini-conf session we will go in depth into two use cases that can leverage on OpenStack to address common operation challenges.

1) We will demo how to leverage HEAT and Ansible to automate the deployment of a two-tier load balanced environment within seconds that will host your enterprise applications.  We will showcase as well the autoscaling capabilities by overloading our web farm until we hit the CPU threshold that will spawn another tomcat server.

2) "Data Cloning as a Service" will demonstrate how to automate the cloning of a 24 x 7 Mission critical Oracle database without impacting the end users.

Ansible is used to place an enterprise database in backup mode, take a snapshot of the volume containing the Database, clone the cinder volume and get it transferred to a development tenant who will automatically start a clone of the database for testing and QA.]]></description>
            <link>https://dev.tube/video/2Gu_rPxuQyQ</link>
            <guid isPermaLink="true">https://dev.tube/video/2Gu_rPxuQyQ</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Lightweight inventory management with Pallet Jack]]></title>
            <description><![CDATA[Karl-Johan Karlsson
http://linux.conf.au/schedule/presentation/114/
Inventory management for systems administrators is crucial for day-to-day operations. When installing a new machine, its MAC address needs to be registered with the DHCP server. While it runs, the configuration management system needs to know what role it has so it can install the correct software. When it breaks, you need to know which rack and switch port to find it in, its serial number and when its service contract expires.

We present [Pallet Jack](https://github.com/saab-simc-admin/palletjack), a systems administrator-friendly inventory database.

Its back-end store consists of a directory tree with YAML fragments, which means you can insert, version and extract information using standard text processing tools. Inheritance and automatic text processing eliminates the need to store duplicated information. Finally, a simple but powerful Ruby library helps with generating configuration files from the database.]]></description>
            <link>https://dev.tube/video/4oq4ursOnlw</link>
            <guid isPermaLink="true">https://dev.tube/video/4oq4ursOnlw</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The Sound of Silencing]]></title>
            <description><![CDATA[Julien Goodwin
http://linux.conf.au/schedule/presentation/164/
Having automatic monitoring alerting us when there's problems with our systems
is a core part of ensuring reliable systems, however this can lead to alert
fatigue.

This talk will cover using silencing, grouping and ihibition to reduce alert
load, and improve the signal to noise ratio of remaining alerts.]]></description>
            <link>https://dev.tube/video/9n2K0PnBKys</link>
            <guid isPermaLink="true">https://dev.tube/video/9n2K0PnBKys</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[QA in the Open]]></title>
            <description><![CDATA[Matthew Treinish
http://linux.conf.au/schedule/presentation/156/
One common misconception about a lot of Open Source projects is that the quality is variable and/or is of a secondary concern. This is supported to a certain degree by a lot of projects which do minimal testing upstream and rely on downstream consumers to do more thorough testing. But, there is no reason that an open project can not also do QA in the open as part of the community. While the term QA will likely evoke a plethora of negative emotions from anyone who has worked in a corporate development environment, there can be real benefits to having a dedicated QA effort on an open source project. It enables transparency in how testing is done, lets anyone contribute and collaborate, and can signal to users the stability of a project. This talk will use OpenStack as an case study to explore how an open source project can do QA in an open manner and the potential benefits it can provide.]]></description>
            <link>https://dev.tube/video/ARV1OuBYYUE</link>
            <guid isPermaLink="true">https://dev.tube/video/ARV1OuBYYUE</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Beautiful Build: Releasing Linux Source Correctly]]></title>
            <description><![CDATA[Bradley M. Kuhn
http://linux.conf.au/schedule/presentation/171/
Most embedded computing products run Linux.  However, obtaining the complete, corresponding source code (CCS), which Linux's license (the GNU GPL) requires, can prove difficult.  The license dictates certain technical requirements; verification of a source code release for license compliance therefore requires technical analysis.  After years of reviewing many source releases for embedded Linux products, the speaker discovered (finally!) an excellent example of CCS, which not only meets the requirements of the GPL, but also enables and encourages users to take advantage of their rights to modify and install new versions of the software on their device.

This talk briefly discusses the components of the router's source release, and then explains the aspects of the source release that made it particularly outstanding.  The talk proposes methods to achieve similar compliance successes on embedded products, suggests procedures for increasing the "tinkerer" userbase by improving beyond even what this excellent example provided, and gives insight into and perspective on compliance engineering analysis that occurs during GPL enforcement work.]]></description>
            <link>https://dev.tube/video/C6HDJThJjyw</link>
            <guid isPermaLink="true">https://dev.tube/video/C6HDJThJjyw</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Community Leadership Summit Summary]]></title>
            <description><![CDATA[VM and group leaders]]></description>
            <link>https://dev.tube/video/GXITFkxslhU</link>
            <guid isPermaLink="true">https://dev.tube/video/GXITFkxslhU</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Multiplayer gaming and distributed state]]></title>
            <description><![CDATA[Caskey L. Dickson
http://linux.conf.au/schedule/presentation/197/
The hardest thing about writing games (after gamplay, mechanics, ux, marketing and paying the bills) is managing the game state as viewed by all users.  This talk will cover the principles of distributed shared state, strategies such as frequent state regeneration, change validation and how your choice of connectivity and latency profiles change the user experience.]]></description>
            <link>https://dev.tube/video/LQTaknsCI0I</link>
            <guid isPermaLink="true">https://dev.tube/video/LQTaknsCI0I</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Interface citizen scientists with government.]]></title>
            <description><![CDATA[Johan Codinha
http://linux.conf.au/schedule/presentation/148/
The victorian biodiversity is facing constant danger, from bush fires to  pest and weeds just to name few. To protect the different ecosystem from natural and human disaster the government needs data !
I am going to walk you thru the history of biodiversity data collection in Victoria ( it's a young country so it's gonna be a short walk ), from hundreds of government employee surveying the countryside in the 80's to 2016 where we rely almost exclusively on citizen scientists to provide accurate data.
Then we will have a look at tools of the past, present and future for collecting biodiversity data and what is the role of standards and open software.
Government agencies are taking land management decision based on biodiversity databases, we will have a look at how the data is beeing verified and what are the potential security risks.]]></description>
            <link>https://dev.tube/video/OXGr4KlQ05E</link>
            <guid isPermaLink="true">https://dev.tube/video/OXGr4KlQ05E</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Opening & Welcome]]></title>
            <description><![CDATA[Chris Neugebauer / Karen Sandler]]></description>
            <link>https://dev.tube/video/Sc7NKOCjugo</link>
            <guid isPermaLink="true">https://dev.tube/video/Sc7NKOCjugo</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Almost Open - Just close the door behind you]]></title>
            <description><![CDATA[Steven Ellis
http://linux.conf.au/schedule/presentation/147/
We are potentially at an interesting tipping point in the future of Free and Open Source software as more of our interactions are managed by services rather than applications. Does Open Source have a future or are we pivoting towards a services based ecosystem where the best we can hope for is some degree of Open Standards? These open standards have no specific entity tasked with defining each of them, yet every day we hear about Open Hardware, Open Government, Open APIs.

What does Open mean within the ecosystem you operate within, and how can we continue to be a catalyst for the journey and grow the Open Source movement when so many closed outcomes are being produced from the Open Source ecosystem?

This is a collaborative session to look unpack the issue and formulate some actions that can be used by the attendees within their communities, businesses and organisations.]]></description>
            <link>https://dev.tube/video/ceYMBBiVfCE</link>
            <guid isPermaLink="true">https://dev.tube/video/ceYMBBiVfCE</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ESP32 development example using IoTuz]]></title>
            <description><![CDATA[Andy Gelme
http://linux.conf.au/schedule/presentation/203/
Developing for IoTuz on ESP32 with an example.]]></description>
            <link>https://dev.tube/video/dugl8N6wZSA</link>
            <guid isPermaLink="true">https://dev.tube/video/dugl8N6wZSA</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Sparse warnings]]></title>
            <description><![CDATA[Daniel Axtens
http://linux.conf.au/schedule/presentation/132/
`sparse` is a semantic parser for C, and is one of the static analysis tools avaliable to kernel devs.

Sparse is a powerful tool with good integration into the kernel build system. However, we suffer from warning overload - there are too many sparse warnings to spot the serious issues amongst the trivial. This makes it difficult to use, both for developers and maintainers.

In hopes of making sparse more useful, I've been slowly chipping away at the sparse warnings in `arch/powerpc` over the last year.

This talk covers:
 * my experience doing this - what I've learned about the kernel and sparse
 * some stats and pretty pictures about the state of sparse warnings
 * where to from here - how to make sparse a useful part of the kernel dev workflow
 * tooling to make sparse more useful - assuming I manage to get it written before the talk!

**Are you interested in kernel development and not sure where or how to start? This talk will cover how fixing sparse warnings can be used as a path into kernel development.**]]></description>
            <link>https://dev.tube/video/hmCukzpevUc</link>
            <guid isPermaLink="true">https://dev.tube/video/hmCukzpevUc</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Preventing Deserialization attacks in Java applications]]></title>
            <description><![CDATA[Jason Shepherd
http://linux.conf.au/schedule/presentation/163/
Recent research by [Chris Frohoff and Gabriel Lawrence has exposed gadget chains](https://frohoff.github.io/appseccali-marshalling-pickles/) in various libraries that allow code to be executed during object deserialization in Java. They've done some excellent research, including [publishing some code](https://github.com/frohoff/ysoserial/) that allows anyone to serialize a malicious payload that when deserialized runs the operating system command of their choice, as the user which started the Java Virtual Machine (JVM). The vulnerabilities are not with the gadget chains themselves but with the code that deserializes them.

There are couple of ways in which this type of attack on the JVM can be mitigated:

* not deserializing untrusted objects;
* not having the classes used in the 'gadget chain' in the classpath;
* running the JVM as a non-root operating system user, with reduced privileges;
* egress filtering not allowing any outbound traffic other than that matching a connection for which the firewall already has an existing state table entry.

In this talk we'll explore each of these in detail, using JBoss EAP as a example of how these mitigations can be introduced.]]></description>
            <link>https://dev.tube/video/nNIuaAf8jII</link>
            <guid isPermaLink="true">https://dev.tube/video/nNIuaAf8jII</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Kernel-bypass networking for fun and profit]]></title>
            <description><![CDATA[Matthew Chapman
http://linux.conf.au/schedule/presentation/134/
In the quest for ever lower networking latencies, there are a growing number of kernel-bypass TCP/IP stacks available from various network card vendors: for example Exablaze's exasock, Solarflare's OpenOnload, Mellanox's VMA, Myricom's DBL and Chelsio's WireDirect.  All of these use the LD\_PRELOAD mechanism to hijack AF\_INET socket calls and direct them to a library and ultimately the network adapter.  Some are entirely implemented in userspace, while others have in-kernel support components that allow more graceful connection handling across processes.  In this talk I will discuss the how and why of these stacks, with a particular focus on the exasock stack developed by my team at Exablaze.]]></description>
            <link>https://dev.tube/video/noqSZorzooc</link>
            <guid isPermaLink="true">https://dev.tube/video/noqSZorzooc</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Human-Driven Development]]></title>
            <description><![CDATA[aurynn shaw
http://linux.conf.au/schedule/presentation/127/
Modern software development is a complex process, and a sometimes difficult team sport. In this talk, aurynn covers the failure modes inherent in current software development, the ways these failure modes are endemic within the broader open source and free software community, and how we can start moving ourselves toward a more sustainable, inclusive developmental style.]]></description>
            <link>https://dev.tube/video/qcBol_s410k</link>
            <guid isPermaLink="true">https://dev.tube/video/qcBol_s410k</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Discovering edge cases with property-based testing.]]></title>
            <description><![CDATA[Svetlana Filimonova
http://linux.conf.au/schedule/presentation/153/
Property-based testing is a popular concept in the world of functional programming. QuickCheck in Haskell is an iconic framework supporting this testing approach. Today we can find testing libraries supporting PBT in any main-stream languages, inlcuding Scala, JavaScript, Ruby, Python, Java etc.

Generated input is obviously constrained by the type of parameters accepted as an input for the code. However the range of this input covers large amount of edge cares, the cases you didn't even know existed in your application. Discovering these cases on early stages of your development process brings quite a big support for 'building quality in' instead of ensuring the quality after an application has been created. As any other automated tests, PBT tests are a part of your continuous integration pipeline, which gives quite a big coverage for regression testing as well. It provides essential feeling of confidence in changing the product as much as required.

In this talk I will present pbt concept and my experience of adopting it on a couple of projects I've been engaged too. I will give an introduction into this practice and some pros and cons, so hopefully it will give you a good idea on when and 
why would you want to use it.

Target Audience: testers/developers, people ensuring quality.]]></description>
            <link>https://dev.tube/video/sGIDDIIjlOg</link>
            <guid isPermaLink="true">https://dev.tube/video/sGIDDIIjlOg</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[U 2 can U2F]]></title>
            <description><![CDATA[Rob N ★
http://linux.conf.au/schedule/presentation/160/
Universal-second factor devices are the new hotness in the two-factor login world. Sleek, sophisticated and secure, they combine high-quality crypto with an even-your-dog-could-use-it one-touch interface to produce a smooth and pleasant login experience.

U2F devices are built on public-key crypto, where the device signs challenges produced by the server. They have many interesting features, including a certificate to identify the device provider, and mechanisms to detect cloned devices and know if the user is actually present when the device is activated. The way they generate key pairs is also quite clever, allowing for devices with no on-board storage at all.

In this talk I'll tell you what U2F is, why it's important, how it works and how to implement it in your service or application. I'll also have some devices to give away to help you get started with this fascinating two-factor technology.]]></description>
            <link>https://dev.tube/video/vv11XMG5UJg</link>
            <guid isPermaLink="true">https://dev.tube/video/vv11XMG5UJg</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Every Game Should Have An API Like Destiny]]></title>
            <description><![CDATA[Richard Deveraux
http://linux.conf.au/schedule/presentation/196/
As a game developer, you should always be looking for ways to engage your players inside and outside your game. If your game is popular, you might even find you have some players with programming experience and want to do more with your game. Implementing an API is one way you can empower these players to create cool applications that can enhance your game in ways you may not have even thought of or have the resources for and it is one of the more unique aspects of large games such as Destiny where it has allowed the game to evolve well beyond what was possible by Bungie alone. As the lead contributor to the [Unofficial BungieNetPlatform API Documentation](http://destinydevs.github.io/BungieNetPlatform/) I can give you a list of tips and suggestions on ways you can enhance your game through the creation of APIs and show you some of the amazing tools the Destiny Developer Community have been able to create because these APIs exist.]]></description>
            <link>https://dev.tube/video/vxtjvec3lME</link>
            <guid isPermaLink="true">https://dev.tube/video/vxtjvec3lME</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:43 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Reproducible Builds for a Better Future]]></title>
            <description><![CDATA[Valerie Young
http://linux.conf.au/schedule/presentation/41/
Many free software projects (Tor, Debian, Fedora and more) have dedicated a great deal of time and effort toward the reproducible builds goal: anyone can download the source code and generate identical binaries. This technical goal has a massive impact on delivering free software's promised freedoms. Our vision:

1. Anyone can verify that the binary program they are running came from the source code they separately downloaded.
2. Anyone can reliably modify their software without fear it will not build on their system.

This talk will begin with the story of the Tor browser bundle becoming entirely reproducible. You will learn how the technical success of Tor inspired the Debian project's ongoing efforts, resulting in an 85% reproducible operating system so far, and other parallel efforts. After laying down this technical and historical background, the talk will focus on concrete ways that achieving reproducible builds will change our relationship with software in the future. 

The intended audience is anyone who cares about free software, no matter your technical experience.]]></description>
            <link>https://dev.tube/video/-nMVfmZL8zk</link>
            <guid isPermaLink="true">https://dev.tube/video/-nMVfmZL8zk</guid>
            <pubDate>Sun, 29 Jul 2018 01:32:35 GMT</pubDate>
        </item>
    </channel>
</rss>